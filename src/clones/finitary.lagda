---
layout: default
title : clones.finitary
date : 2021-05-31
author: William DeMeo
---


## Clones (See §4.1 of Bergman)

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import agda-imports
open import overture.preliminaries
open import relations.extensionality
open import relations.continuous
open import structures.finitary
open import clones.base
-- open import homs.base

module clones.finitary where


private
  variable
    α β γ ρ ρ₀ ρ₁ : Level
    A : Set α
    B : Set β
    C : Set γ



-- Term equivalence of finitary structures

-- Recall definition of equivalence of clones generated by collections of operations.
-- _≃_ : {A : Type α} (𝒦₁ 𝒦₂ : Pred O[ A ] α) → Type α
-- 𝒦₁ ≃ 𝒦₂ = Clone 𝒦₁ ⊆ Clone 𝒦₂ × Clone 𝒦₂ ⊆ Clone 𝒦₁


-- Equivalence of clones of term operations of finitary structures.
module _ {α ρ ϕ : Level}{A : Type α}{P₀ P₁ : Pred O[ A ] ϕ}{R₀ R₁ : Pred R[ A ∣ ρ ] ϕ} where
 𝑨₀ : finStructure {α}{ρ}{ϕ}
 𝑨₀ = record { carrier = A ; rel = R₀ ; ops = P₀ }
 𝑨₁ : finStructure {α}{ρ}{ϕ}
 𝑨₁ = record { carrier = A ; rel = R₁ ; ops = P₁ }

 ≅̇ : Type (α ⊔ ϕ)
 ≅̇ = ops 𝑨₀ ≃ ops 𝑨₁

 -- operations : (𝐴 : finStructure {α} 𝑅 {ρ} 𝐹) → Pred Type ?
 -- operations 𝑨 = Σ[ f ∈ symbol 𝐹 ] (op 𝑨 f)

 -- operations : (𝐴 : finStructure {α} 𝑅 {ρ} 𝐹) → Pred O[ A ] α
 -- operations 𝑨 gg = Σ[ f ∈ symbol 𝐹 ] ∀ x → (op 𝑨 f) x ≡ {!(snd gg) x!})
















-- -- alias (so that we can easily change the level of X later if necessary)
-- χ : Level
-- χ = ℓ₀

-- _⟦_⟧ : (𝑨 : structure {α} 𝑅 {ρ₀} 𝐹){X : Type χ } → Term X → Op (carrier 𝑨) {X}
-- 𝑨 ⟦ ℊ x ⟧ = λ η → η x
-- 𝑨 ⟦ node 𝑓 𝑡 ⟧ = λ η → (op 𝑨 𝑓) (λ i → (𝑨 ⟦ 𝑡 i ⟧) η)

-- Clo : (𝑨 : structure {α} 𝑅 {ρ₀} 𝐹){X : Type χ } → Pred (Op (carrier 𝑨) {X}) α
-- Clo 𝑨 {X} = λ (o : Op (carrier 𝑨) {X}) → Σ[ t ∈ Term X ] (o ≡ 𝑨 ⟦ t ⟧)





-- data projclone {A : Type α} : Pred( O[ A ] ) α where
--  cbas : {n : ℕ}(i : Fin n) → (n , π[ n ] i) ∈ projclone
--  com : {n k : ℕ} (f : Op[ A ] n)(G : (i : Fin n) → Op[ A ] k)
--   →     (n , f) ∈ projclone → (∀ i → (k , G i) ∈ projclone) → (k , f ∘[ k ] G) ∈ projclone

